-- =========================================================
-- Script de criação do banco (DER da Sprint 3)
-- =========================================================

-- Tipos de sensores
CREATE TABLE SENSOR_TYPES (
  SENSOR_TYPE_ID   NUMBER GENERATED BY DEFAULT AS IDENTITY,
  CODE             VARCHAR2(40)  NOT NULL,
  UNIT             VARCHAR2(20)  NOT NULL,
  DESCRIPTION      VARCHAR2(120),
  CONSTRAINT PK_SENSOR_TYPES PRIMARY KEY (SENSOR_TYPE_ID),
  CONSTRAINT UQ_SENSOR_TYPES_CODE UNIQUE (CODE)
);

-- Culturas agrícolas (soja, milho, etc)
CREATE TABLE CROPS (
  CROP_ID   NUMBER GENERATED BY DEFAULT AS IDENTITY,
  NAME      VARCHAR2(50) NOT NULL,
  CONSTRAINT PK_CROPS PRIMARY KEY (CROP_ID)
);

-- Campos ou talhões
CREATE TABLE FIELDS (
  FIELD_ID  NUMBER GENERATED BY DEFAULT AS IDENTITY,
  NAME      VARCHAR2(50) NOT NULL,
  AREA_HA   NUMBER(8,2)  NOT NULL,
  CONSTRAINT PK_FIELDS PRIMARY KEY (FIELD_ID),
  CONSTRAINT CK_FIELDS_AREA_POSITIVE CHECK (AREA_HA > 0)
);

-- Plantios realizados
CREATE TABLE PLANTINGS (
  PLANTING_ID    NUMBER GENERATED BY DEFAULT AS IDENTITY,
  FIELD_ID       NUMBER NOT NULL,
  CROP_ID        NUMBER NOT NULL,
  PLANTING_DATE  DATE NOT NULL,
  AREA_HA        NUMBER(8,2) NOT NULL,
  SEED_DENSITY   VARCHAR2(80),
  CONSTRAINT PK_PLANTINGS PRIMARY KEY (PLANTING_ID),
  CONSTRAINT FK_PL_FIELD FOREIGN KEY (FIELD_ID) REFERENCES FIELDS(FIELD_ID),
  CONSTRAINT FK_PL_CROP FOREIGN KEY (CROP_ID) REFERENCES CROPS(CROP_ID),
  CONSTRAINT CK_PL_AREA_POSITIVE CHECK (AREA_HA > 0)
);

-- Colheitas (cada plantio tem uma)
CREATE TABLE HARVESTS (
  HARVEST_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
  PLANTING_ID      NUMBER NOT NULL,
  HARVEST_DATE     DATE NOT NULL,
  YIELD_KG_PER_HA  NUMBER(8,2) NOT NULL,
  CONSTRAINT PK_HARVESTS PRIMARY KEY (HARVEST_ID),
  CONSTRAINT FK_HV_PLANT FOREIGN KEY (PLANTING_ID) REFERENCES PLANTINGS(PLANTING_ID),
  CONSTRAINT UQ_HV_PLANT UNIQUE (PLANTING_ID),
  CONSTRAINT CK_HV_YIELD_POS CHECK (YIELD_KG_PER_HA >= 0)
);

-- Sensores físicos
CREATE TABLE SENSORS (
  SENSOR_ID        NUMBER GENERATED BY DEFAULT AS IDENTITY,
  SENSOR_TYPE_ID   NUMBER NOT NULL,
  MANUFACTURER     VARCHAR2(60),
  MODEL            VARCHAR2(60),
  SERIAL_NUMBER    VARCHAR2(60),
  INSTALLED_AT     TIMESTAMP,
  CONSTRAINT PK_SENSORS PRIMARY KEY (SENSOR_ID),
  CONSTRAINT FK_SENSORS_TYPE FOREIGN KEY (SENSOR_TYPE_ID) REFERENCES SENSOR_TYPES(SENSOR_TYPE_ID)
);

-- Instalações de sensores em campos (com histórico)
CREATE TABLE SENSOR_INSTALLATIONS (
  INSTALLATION_ID  NUMBER GENERATED BY DEFAULT AS IDENTITY,
  SENSOR_ID        NUMBER NOT NULL,
  FIELD_ID         NUMBER NOT NULL,
  STARTED_AT       TIMESTAMP NOT NULL,
  ENDED_AT         TIMESTAMP,
  CONSTRAINT PK_SENSOR_INSTALLATIONS PRIMARY KEY (INSTALLATION_ID),
  CONSTRAINT FK_INST_SENSOR FOREIGN KEY (SENSOR_ID) REFERENCES SENSORS(SENSOR_ID),
  CONSTRAINT FK_INST_FIELD FOREIGN KEY (FIELD_ID) REFERENCES FIELDS(FIELD_ID),
  CONSTRAINT CK_INST_PERIOD CHECK (ENDED_AT IS NULL OR ENDED_AT >= STARTED_AT)
);

-- Índices para facilitar consultas
CREATE INDEX IX_INST_SENSORS ON SENSOR_INSTALLATIONS (SENSOR_ID);
CREATE INDEX IX_INST_FIELD   ON SENSOR_INSTALLATIONS (FIELD_ID);

-- Leituras feitas pelos sensores
CREATE TABLE READINGS (
  READING_ID       NUMBER GENERATED BY DEFAULT AS IDENTITY,
  INSTALLATION_ID  NUMBER NOT NULL,
  TS_UTC           TIMESTAMP NOT NULL,
  VALUE_NUM        NUMBER NOT NULL,
  CONSTRAINT PK_READINGS PRIMARY KEY (READING_ID),
  CONSTRAINT FK_READ_INST FOREIGN KEY (INSTALLATION_ID) REFERENCES SENSOR_INSTALLATIONS(INSTALLATION_ID),
  CONSTRAINT UQ_READ_UNIQUE UNIQUE (INSTALLATION_ID, TS_UTC)
);

-- Índice para buscas por data/hora
CREATE INDEX IX_READ_TS ON READINGS (TS_UTC);

-- =========================================================
-- Views para facilitar consultas
-- =========================================================

-- Mostra apenas instalações que ainda estão ativas
CREATE OR REPLACE VIEW VW_ACTIVE_INSTALLATIONS AS
SELECT INSTALLATION_ID,
       SENSOR_ID,
       FIELD_ID,
       STARTED_AT,
       ENDED_AT
FROM SENSOR_INSTALLATIONS
WHERE ENDED_AT IS NULL OR ENDED_AT > SYSTIMESTAMP;

-- Junta leituras com info do tipo de sensor e do campo
CREATE OR REPLACE VIEW VW_READINGS_ENRICHED AS
SELECT r.READING_ID,
       r.TS_UTC,
       r.VALUE_NUM,
       r.INSTALLATION_ID,
       s.SENSOR_ID,
       st.SENSOR_TYPE_ID,
       st.CODE   AS SENSOR_TYPE_CODE,
       st.UNIT   AS SENSOR_UNIT,
       f.FIELD_ID,
       f.NAME    AS FIELD_NAME
FROM READINGS r
JOIN SENSOR_INSTALLATIONS si ON si.INSTALLATION_ID = r.INSTALLATION_ID
JOIN SENSORS s               ON s.SENSOR_ID = si.SENSOR_ID
JOIN SENSOR_TYPES st         ON st.SENSOR_TYPE_ID = s.SENSOR_TYPE_ID
JOIN FIELDS f                ON f.FIELD_ID = si.FIELD_ID;
